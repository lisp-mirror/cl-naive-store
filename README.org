* cl-naive-store

=cl-naive-store= is a log structured document store. Documents are
loaded in-memory to facilitate fast querying. Depending on how you use
the store documents will be lazy loaded and indexed. It is written
completely in Common Lisp.

The "naive" comes from the fact that data is persisted
as plists in files to make them human and machine readable, also there
is no rocket science code.

The store was designed to be customisable, just about anything can be
customised, have a look at the implementation API to get an idea of
what is possible.

** Status

The package is considered stable.

Over the next couple of months the package will be used in
commercial software and should get a good shake down during that
process.

** License

=cl-naive-store= is released under the [[file:LICENSE][MIT license]].

** News

The concept of a multiverse was added to the store. Previously the top
level container for data was a universe (a clustering of databases). A
multiverse is the top structural container for data no. A multiverse
contains one or more universes. A multiverse could be viewed as a
clustering of clusters of databases.

Code underwent a majour refactoring. The user api was
simplified. cl-naive-deprecation was used to help ease you into the
api changes.

Tests where rewritten to use cl-naive-tests and are a lot simpler to
read and learn from.

Code to manage your database schemas was added to naive-core. You can
now use schema files to initialise and load a database.

Speed tests where added for those that want to dig into performance
metrics. Going through speed tests code will teach you a couple of
tricks about how to use the library optimally.

** Acknowledgements

Thank you very much to everyone that contributed over the years.

** Features

*** Persisted

Data can be written to file for each document update, or as a batch update.

*** In memory

Data is loaded into memory for querying and lookups, which makes these operations fast.

*** Lazy Loading

Data is only loaded when needed. If you use the store
correctly it means that you will only have the data that users
requested up to that point in memory.

*** Indexed

Documents and key-values can be indexed, and a user can specify their
own additional indexes as well. Queries and lookups can both be done using
indexes which speeds up the retrieval of data considerably.

*** Sharding

Sharding is the breaking down of files into smaller files, in the case
of naive-store that means that instead of one file per collection there
could be many.

Sharding is done based on the actual data in collections. The user
specifies which elements of a document it wants to use for sharding on
a collection. If none is specified no sharding is done.

*** Layered Design

=cl-naive-store= can do a lot but you as the user decides how much of
the store's functionality you want to use for your own project.

Functionality was broken down into these packages:

- =cl-naive-store.naive-core=
- =cl-naive-store.document-types=
- =cl-naive-store.document-type-defs=
- =cl-naive-store.naive-documents=
- =cl-naive-store.naive-indexed=
- =cl-naive-store.naive-merkle=
- =cl-naive-store.test=

The following .asd files can be used to load different functionality:

- =cl-naive-store.naive-core.asd= loads the most basic functionality for
  =cl-naive-store=. Use this if you don't any of the other extensions.

- =cl-naive-store.naive-merkle.asd= loads =naive-documents= and the
  /experimental/ merkle functionality.

- =cl-naive-store.naive-indexed.asd= loads =naive-core= and index
  functionality.

- =cl-naive-store.document-types.asd= loads =naive-core= and document-type
  functionality.

- =cl-naive-store.document-defs.asd= loads =naive-core=, document-types
  and type definition functionality.

- =cl-naive-store.documents.asd= loads naive-core, naive-indexed,
  documents-types, document-type-defs and document functionality.

- =cl-naive-store.asd= loads the whole shebang.

- =cl-naive-store.test.asd= loads tests

** Documentation

The documentation can be found in the [[file:docs/][docs]] folder in the repository.

** Examples

Examples are in the [[file:examples/][examples]] folder in the git repository. If those are
to simplistic for you have a look at the code in the tests.

** Dependencies

- cl-fad
- iron-clad
- cl-murmurhash
- split-sequence
- uuid
- local-time
- cl-getx
- bordeaux-threads
- lparallel
- cl-cpus

** Supported CL Implementations

All tests pass on SBCL an CCL

** Development Roadmap

The cl-naive-* projects are not available in quicklisp, and wont be
for the forseeable future.

** Tests

Go to the tests folder

#+BEGIN_EXAMPLE
cd cl-naive-store/
#+END_EXAMPLE

Run make with any of the following

- test
- test-run-tests
- run-tests-ccl
- run-tests-sbcl

For example:

#+BEGIN_EXAMPLE
make test-run-tests
#+END_EXAMPLE

You should see the following at the end.

#+BEGIN_EXAMPLE
Testsuite TEST-DEFINITIONS:

Testsuite TEST-BASIC:

Testsuite TEST-BASIC-PERSISTED:

Testsuite TEST-INDEXED:

Testsuite TEST-NAIVE-DOCUMENTS:

Testsuite TEST-SHARDING-SIMPLE:

Testsuite TEST-SHARDING-INDEXED:
Passed:       48
Failed:        0
#+END_EXAMPLE

Alternatively if you want to run the tests manually

#+BEGIN_SRC lisp
  (ql:quickload :cl-naive-store.tests)
  (cl-naive-store.tests:test-all)
#+END_SRC


