* Document Type Definitions

cl-naive-document-type-defs is a "declaritive" implementation (I am
using the word loosly) of cl-naive-document-type (abstract data
type???).

What use are type-defs? Well they are there to descibe the document
type. IE more information about elements of a document type and the
document type it self. Such information could cover any thing from the
basics to the esoteric, and that is one of the reasons why this is a
"declaritive" implementation. The information covered is not always
relevant to the database but could be extra information needed by a
GUI to display an update a document and its elments correctly.

To understand the "loose" protocol/interface of cl-naive-type-defs we
will look at the parts of the type def.

** :document-type

#+BEGIN_SRC lisp
  ```
  (:document-type
   (:name "for use by programs"
    :label "name for use by humans"
    :elements "a list of elements that make up the document type"
    :attributes "anything else you want to share about the data type"
    :documentation ""))
  ```
#+END_SRC

Looks familiar? Well it should look and smell like a naivie-document-type

*** :document-type :elements

#+BEGIN_SRC lisp
  ```
  ((:name "for use by programs, by convention KEYWORD to encourage data portability"
    :label "name for use by humans"
    :key-p "is this a key element"
    :concrete-type "how is the data represented in a program, ie string,
		    integer, document etc"
    :attributes "anything else you want to share about the element"
    :documentation "")

   ...)
  ```
#+END_SRC

**** :element :attributes

#+BEGIN_SRC lisp
  ```
  (:property-name-1 'value :property-name-2 'value)
  ```
#+END_SRC

**** :element :concrete-type

These can be simple or complex.

Simple concrete type would be :string or :number

Complex concrete type examples:

Simple concrete type would be :string or :number

Complex concrete type examples:

Type of document:

#+BEGIN_SRC lisp
  ```
  (:type (:document
	  (:type "Employee"
	   :accessor (:emp-no))))
  ```
#+END_SRC

List of strings:

#+BEGIN_SRC lisp
  ```
  (:type (:list :string))
  ```
#+END_SRC

List of document:s

#+BEGIN_SRC lisp
  ```
  (:type (:list
	  (:document
	   (:type "Child"
	    :accessor (:name)))))
  ```
#+END_SRC

A reference doc. (Document residing in a different place (ie collection))

#+BEGIN_SRC lisp
  ```
  (:type (:document
	  (:type "Laptop"
	   :collection "laptop-collection"
	   :accessor (:id))))
  ```
#+END_SRC

The convention is to stop at 2 layers of element type, any deeper
becomes unwieldy. That does not mean that you can only stop at two
levels of document hierarchy you can have doc types within doc types
and so on, but the complex document type only needs to know about it
self and one layer down.

You can have self referencing types, see the first-born element in the
full example.

** Collections

To be able to fully define reference types we need to also give defs
of collections.

#+BEGIN_SRC lisp
  ```
  (:collection
   (:name "laptops"
    :label "Company Laptops"
    :data-type "laptop"))
  ```
#+END_SRC

** getx

cl-naive-type defs offer us the opportunity to use an element-def as
the accessor to the value of the element in the document. getx is used
to achieve this, the specialization makes full use of the the type
defs to implement much more complex/intelligent getting and setting of
the values. It does that by calling getxe that has specializations
that understand complex types and what to do.

Simple validation at setf time is also offered by supplying a function
to setf-validate in attributes of an element. Validation functions
must return 2 values the first indicates pass or fail the second is a
message which is usually the reason for failure.

#+BEGIN_SRC lisp
  ```
  (:name :age
   :label "Age"
   :concrete-type :number
   :attributes (:display t :editable t
		:setf-validate ;;setf-validate-is called for (setf getxe)
			 (lambda (age)
			   (if (<= age 21)
			       (values t nil)
			       (values nil "Child is to old"))))
   :documentation "How old the child is")
  ```
#+END_SRC

** The full Example:

Because tyge-defs uses cl lists you are well on your way to a domain
specific language, your imagination is your only limitation.

You can use type-defs to bootstrap an application, creating stores and
collections on the fly. They also come in very handy when you
implement a GUI because they are so rich in information.

cl-naive-store does not use type-defs. All it does is give you
cl-document-types which gives you a place to load your defs and access
them at run time. It will also persist the type defs for you.

cl-document-types requirements are minimal and its up to you to load
your type-defs into the store so that means you can do with or
structure your type defs any way you want. But if you want to share
typedefs portably then you might have to consider sticking to what
cl-document-type-defs offer, at least as a minimal baseline.

#+BEGIN_SRC lisp
  ```
  '((:document-type
     (:name "laptop"
      :label "Laptop"
      :elements ((:name :id
		  :label "Serial No"
		  :key-p t
		  :concrete-type :string
		  :attributes (:display t :editable t)
		  :documentation "Unique no that identifies the laptop.")
		 (:name :make
		  :label "Manufaturer"
		  :concrete-type :string
		  :attributes (:display t :editable t)
		  :documentation "Then manufaturer of the laptop.")
		 (:name :model
		  :label "Model"
		  :concrete-type :string
		  :attributes (:display t :editable t)
		  :documentation "Model of the laptop."))
      :attributes ()
      :documentation "List of laptops the company owns."))

    (:collection
     (:name "laptops"
      :label "Company Laptops"
      :data-type "laptop"))

    (:document-type
     (:name "child"
      :label "Child"
      :elements ((:name :name
		  :label "Name"
		  :key-p t
		  :concrete-type :string
		  :attributes (:display t :editable t)
		  :documentation "Name of child")
		 (:name :sex
		  :label "Gender"
		  :concrete-type :key-word
		  :value-list (:male :female)
		  :attributes (:display t :editable t)
		  :documentation "Gender of the child, can only be male or female.")
		 (:name :age
		  :label "Age"
		  :concrete-type :number
		  :attributes (:display t :editable t
			       ;;setf-validate-is called for (setf getxe)
			       :setf-validate
			       (lambda (age)
				 (if (<= age 21)
				     (values t nil)
				     (values nil "Child is to old"))))
		  :documentation "How old the child is"))
      :attributes ()
      :documentation "List of laptops the company owns."))

    (:document-type
     (:name "employee"
      :label "Employee"
      :elements ((:name :emp-
		  :label "Employee Number"
		  :key-p t
		  :concrete-type :number
		  :attributes (:display t :editable t)
		  :documentation "Unique identifier of employee.")
		 (:name :name
		  :label "Name"
		  :concrete-type :string
		  :attributes (:display t :editable t)
		  :documentation "Name of employee")
		 (:name :sex
		  :label "Gender"
		  :concrete-type :key-word
		  :value-list (:male :female)
		  :attributes (:display t :editable t)
		  :documentation "Gender of the child, can only be male or female.")
		 (:name :dependents
		  :label "Children"
		  :concrete-type (:type (:list
					 (:document
					  (:type "Child"
					   :accessor (:name)))))
		  :attributes (:display t :editable t)
		  :documentation "List of the employees children")
		 (:name :laptop
		  :label "Laptop"
		  :concrete-type (:type (:document
					 (:type "laptop"
					  :collection "laptop-collection"
					  :accessor (:id))))
		  :attributes (:display t :editable t)
		  :documentation "Laptop allocated to employee")
		 (:name :first-born
		  :label "First Born Child"
		  :concrete-type (:type (:document
					 (:type "child"
					  :collection "employees"
					  :accessor (:emp-no :dependents :name))))
		  :attributes (:display t :editable t)
		  :documentation "List of the employees children"))
      :attributes ()
      :documentation "List of laptops the company owns."))

    (:collection
     (:name "employees"
      :label "Company Employees"
      :data-type "employee")))
  ```
#+END_SRC

