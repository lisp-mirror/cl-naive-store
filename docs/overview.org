* Overview

** Log Structured Database

At its core =cl-naive-store= is a log structured database.

A log-structured database is a type of database management system that
organizes and stores its data in a sequential, append-only
manner. Instead of overwriting data, it records all changes
as a continuous stream of log entries. Each entry typically captures
an operation, such as an insertion, update, or deletion, along with
the associated data.

Advantages of a log-structured database include:

High Write Throughput: Since all changes are simply appended, the
system can achieve high write speeds.

Simplified Crash Recovery: By replaying the log from a known good
state, the database can recover its state after a crash. The replaying
of the log however kicks you in the teeth when you get to tens of
millions of records.

Consistent Snapshots: By marking points in the log, consistent
snapshots of the database can be obtained without halting writes.

A log structured database can be slow to query if you query the files
directly. To overcome that =cl-naive-store= was designed to be an in
memory store. That means that when querying the data the file
structure does not come into play.

=cl-naive-store= has several layers of functionality that extends the
basic log store to a full document store. Each layer adds additional
functionality at the cost of increased overhead and complexity.

The concept of a document is only loosely implemented and enforced in
the base and indexed layers. It is when you use the full document
layer that the store becomes a proper document store.

=cl-naive-store= does not enforce the use of data schemas for your
data. Data schemas are optional and when used is only there to use as
a guideline, no strict enforcement of data schemas are done. This in
line with what is expected of a document store.

** Choosing Layers of Functionality

Depending on the your use case you need to choose the appropriate
layer(s) to use. It must be noted that you can use a mixture of layers
depending on your requirements, this adds complexity to your data
schemas and will take a lot of testing to get the right balance.

As a rule of thumb using the full document layer will serve most
purposes well.

*** Base Layer (Simple Log Database)

The base layer =naive-core= implements the basics of a log store with
in memory querying.

This layer has the smallest memory footprint per document and is the
least prescriptive as far as the structure of the data you use.

When should you use just the base layer?

1. Small Database

   A couple hundred/thousand documents per collection. For example a
   database serving a simple website.

2. Large Database with no keys

   An example would be an event logger or such.

What you cannot do with the base layer is load millions of documents
with keys. The simple reason for this is that the underlying structure
(array) for the base layer does not support fast duplicate checking
for keys. Duplicate checking is essential when loading (replaying) a log
structured database from file.

This layer also does not have intelligence to deal with hierarchical
data efficiently.

*** Indexed Layer

The indexed layer =naive-indexed= introduces document identity. It
adds hash tables that support fast duplicate checking and lightning
fast look-ups of individual documents or groups of documents.

So it is ideal for loading millions of records with keys.

This layer also does not have intelligence to deal with hierarchical
data efficiently as it does not implement structured documents.

*** Document Layer

The document layer builds on all the other layers to implement a full
document store. This layer wraps a document in a structure that allows it to
recognise and deal with reference and associated documents, taking
document identity to its conclusion. In this layer you can reference a
document from one collection in another collection efficiently.

The document layer also introduces the concept of versions which plays
to the strengths of a log structured database.

It is in this layer that you can start using data schemas (document
types) for your collections.

** Functionality by Layer

=cl-naive-store.*= packages are designed to be layered to achieve complex
behaviour in incremental steps.

*** Functionality Matrix

| Functionality                      | naive-core | naive-indexed | document-types | definitions | naive-documents |
| ------                             | ------     | ------        | ------         | ------      | ------          |
| Load data into memory              | T          |               |                |             |                 |
| Delete Data                        | T          |               |                |             |                 |
| Persist data to file               | T          |               |                |             |                 |
| Query Data                         | T          |               |                |             |                 |
| Single Key Value                   | T          |               |                |             |                 |
| Unique Object Identifier           |            | T             |                |             |                 |
| Multiple Key Values                |            | T             |                |             |                 |
| Key Value Lookups                  |            | T             |                |             |                 |
| Index Data                         |            | T             |                |             |                 |
| Index Lookups                      |            | T             |                |             |                 |
| Handles Duplicates Properly        |            | T             |                |             |                 |
| Data Type aware Universe           |            |               | T              |             |                 |
| Data Schemas/Definitions           |            |               |                | T           |                 |
| Hierarchical Data Objects          |            |               |                |             | T               |
| Cross Collection Reference Objects |            |               |                |             | T               |
| Object Version Tracking            |            |               |                |             | T               |
| Object Value Change Tracking       |            |               |                |             | T               |

** Structure of the store

The store has the following structure 

#+BEGIN_SRC mermaid :exports results :file universe.png
  graph LR;
      A[multiverse]-->B[universes];
      B[universes]-->C[universe];
      C[universe]-->E[stores]
      E[stores]-->F[store]
      F[store]-->H[document-types]
      H[document-types]-->I[document-type]
      F[store]-->J[collections]
      J[collections]-->K[collection]
      K[collection]-->M[documents]
      M[documents]-->N[document]
      I[document-type]-->K[collection]
      I[document-type]-->N[document]
#+END_SRC

#+RESULTS:
[[file:multiverse.png]]

*** Multiverse

A multiverse is the top structural container for data. A multiverse
contains one or more universes. A multiverse could be viewed as a
clustering of clusters of databases.

*** Universe

A universe contains one or more stores. A universe could be viewed as
a cluster of databases.

*** Store

A store contains one or more collections. A store could be viewed as a database.

A store also contains one or more document-types.

*** Document Type

Document types are type schemas. A collection can be linked to a document-type. However
not all document-types have a direct link to a collection. Some
document types are indirectly linked because they are part of a
document with a hierarchical structure.

*** Collection

When data is persisted the file folders/directories mirror the
relationship above, which makes it possible to lazy load the data only
when needed from disk. Querying an unloaded collection will cause the
loading of a collection and in the case of naive-documents any
referenced collections as well.

*** Documents

A document in =cl-naive-store= in simplest terms is a list of key
value pairs, in other words a property list. This is also how a
document is represented in the actual log files. Log files are read
using cl read-line.

=naive-indexed= adds the concept of a UUID (aka hash key).

=naive-documents= adds additional meta data like the multiverse,
universe, store, collection, changed data and old versions to the
document.

** In memory

Data is loaded into memory for querying and lookups, that makes them
fast.

You can load the whole multiverse, universe, a store, a collection or a shard at a
time.

** Lazy Loading

You do not have to explicitly load data into memory upfront. You can
leave it up to the store to only load data when needed. It means that
you will only have the data that users requested up to that point in
memory. Data in memory can easily be garbage collected if not in use
any more. =cl-naive-store= does not do garbage collection for you that
is left to the user.

** Persistence

=cl-naive-store= relies on the fact that objects are translatable to
key-value pairs and writes plists to a file per collection. Note of
caution here if you go and store unprintable values (ie not readable)
in the db you are going to be very disappointed when you try to load
the db again!

** Sharding

Sharding is the breaking down of files into smaller files, in the case
of naive-store that means that instead of one file per collection there
could be many.

Sharding is done based on the actual data in collections. The user
specifies which elements of a document it wants to use for sharding on
a collection. If none is specified no sharding is done.

You should not set up sharding to use data that can change for a
document, it will cause problems. For instance if you use company
name to affect sharding for data by company/client then you should not
be able to change the company name for the document. If you need to do
it on rare occasions then you should delete (and write out a new log
file with those documents stripped out) to keep your sanity.

** Document Types

=cl-naive-store= is mostly/blissfully unaware of user defined document
types and value types. =document-types= adds document-type and element
classes, extending the store and collection classes to store document
types.

Document types are ignored when doing persistence, and loading from
disk, =document-types= just adds a place to store your document
types and retrieve them at run time. Document types can be what ever
you dream up!

If you want document type validation based on your document type
definitions you need to implement it yourself, overriding add-object
and persist-object should be enough.

** Definitions

=cl-naive-store= stores definitions (plist trees) for multiverse,
universe, store, collection and document-types. These can be user to
load of a multiverse with minimal code instead of loading the store in
code steps.

You can use =definitions= to define the full multiverse schema.

For an in depth discussion look at [[file:definitions.org][Definitions]].

** Naive Documents

Naive Documents uses =naive-core=, =naive-indexed=, =document-types=
and =definitions= to create a more complex/fleshed out data store
experience. Note that document types are still only used for their key
and index definitions and no data type specific validation is done
when loading or persisting data.

Other peculiarities of Naive Documents:

- Nothing stops you form adding "new" key values/types to your
  document at any time, since they are not validated against a
  document-type definition. A typical document database should be able
  to store different document types or at least document-types with
  varying data.
- A document has key-values that are used to check for equality when
  adding an object to a collection
- A document keeps a set of old and new values while you are updating
  values, this is cleared on persist.
- A document is expected to be hierarchical in nature, i.e. a document
  key-value pair can hold other documents (child documents). Child
  documents come in two basic flavours, documents that have no
  collection of their own (associated documents), and documents
  referenced from other collections (reference documents). When a top
  level document is persisted only "references" to the referenced
  child document are persisted (The child document itself is not
  updated!). Associated documents are persisted in full.

** BLOBS

=cl-naive-store= knows how to deal with values that are blobs. Basically
blobs are written to their own files and if file type is relevant the
correct file type is used.

There are no tests for blobs yet so use at own risk!

* [[file:home.org][Home]] :noexport:                                                
* [[file:releases.org][Previous]] :noexport:
* [[file:examples.org][Next]] :noexport:

