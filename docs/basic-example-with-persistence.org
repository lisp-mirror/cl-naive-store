* Basic Example with Persistence

In this example only the bare minimum is used and documents added are **persisted**.

#+BEGIN_SRC lisp
(ignore-errors (delete-package :naive-examples))

;;Load to use cl-naive-store
(require 'cl-naive-store)
(defpackage :naive-examples (:use :cl :cl-getx :cl-naive-store.naive-core))
(in-package :naive-examples)

;;Required to correctly initialize lparallel:*kernel*.
(initialize)

;;Deleting existing example database
(cl-fad:delete-directory-and-files
 "~/multiverse/universe/simple-store"
 :if-does-not-exist :ignore)
 
(let* (;;Create a multiverse.
       (multiverse (make-instance
                    'multiverse
                    :name "multiverse"
                    :location "~/multiverse/" ;Setting the location on disk.
                    :universe-class 'universe))
       ;;Create a universe and add it to the multiverse
       (universe (add-multiverse-element
                  multiverse
                  (make-instance
                   'universe
                   :name "universe"
                   :multiverse multiverse
                   :location "~/multiverse/universe/" ;Setting the location on disk.
                   :store-class 'store)))
       ;;Create a store and add it to the universe
       (store (add-multiverse-element
               universe
               (make-instance 'store
                              :name "simple-store"
                              :collection-class 'collection)))

       ;;Create a collection and add it to the store
       (collection (add-multiverse-element
                    store
                    (make-instance 'collection
                                   :name "simple-collection"
                                   ;;Specifying the key element, else its :key
                                   :keys '(:id)))))

  ;;Add some documents to the collection
  (persist-document collection (list :name "Piet" :surname "Gieter" :id 123))
  (persist-document collection (list :name "Sannie" :surname "Gieter" :id 321))
  (persist-document collection (list :name "Koos" :surname "Van" :id 999))

  ;;Clear the collection, ie unload documents from memory so we can
  ;;show that it has been persisted.
  (clear-collection collection)

  ;;Query the collection, query-data will load the data from file if
  ;;the collection is empty
  (query-data collection :query (lambda (document)
                                  (<= (getx document :id) 900))))
#+END_SRC

Output:

#+BEGIN_SRC lisp
  ((:NAME "Piet" :SURNAME "Gieter" :ID 123)
   (:NAME "Sannie" :SURNAME "Gieter" :ID 321))
#+END_SRC

To see the file created for the data go to
~/multiverse/universe/simple-store/simple-collection/ there you should
find a simple-collection.log file and you should see the following in
the file

#+BEGIN_SRC lisp
  (:NAME "Piet" :SURNAME "Gieter" :ID 123)
  (:NAME "Sannie" :SURNAME "Gieter" :ID 321)
#+END_SRC

** Lazy Loading

In this example =query-data= loaded and persisted (in one step) the
data into the collection. To show that the data was successfully
persisted and that query will lazy load the data when needed, the
collection is cleared and only then queried. 

You can explicitly load the collection yourself by using =(load-data collection)=.

[[file:home.org][Home]] :noexport: [[file:basic-example.org][Previous]] :noexport: [[file:indexed-example.org][Next]] :noexport:
