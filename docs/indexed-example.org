* Indexed Example

In this example we extend the basic functionality with indexing.

#+BEGIN_SRC lisp
  ;;Setup to use cl-naive-store
  (require 'cl-naive-store)
  (defpackage :naive-examples (:use :cl :cl-naive-store.naive-core
				    :cl-naive-store.naive-indexed))
  (in-package :naive-examples)

  ;;Create a class that inherits form indexed-collection-mixin and collection.
  (defclass indexded-collection (indexed-collection-mixin collection)
    ())

  ;;Create a universe
  (defparameter *universe* (make-instance
			    'universe
			    :location "~/data-universe/" ;Setting the location on disk.
			    :store-class 'store))

  (let* (;;Create a store and add it to the universe
	 (store (add-store *universe*
			   (make-instance 'store
					  :name "simple-store"
					  :collection-class 'collection)))

	 ;;Create a collection and add it to the store
	 (collection
	   (add-collection store
			   (make-instance 'indexded-collection
					  :name "simple-collection"
					  ;;Specifying the key field, else its :key:
					  :keys '(:id)
					  ;;Specifying the fields to set up indexes for.
					  :indexes '(:name :surname))))
	 (results))

    ;;Add some objects to the collection

    (persist-object collection (list :name "Piet" :surname "Gieter" :id 123))
    (persist-object collection (list :name "Sannie" :surname "Gieter" :id 321))
    (persist-object collection (list :name "Koos" :surname "Van" :id 999))
    (persist-object collection (list :name "Frikkie" :surname "Frikkedel" :id 1001))
    (persist-object collection (list :name "Tannie" :surname "Frikkedel" :id 1001))

    ;;Lookup koos using index values and add it to results
    (push
     (index-lookup-values collection (list (list :name "Koos")
					   (list :surname "Van")))
     results)

    ;;Lookup Frikkedel using index values and add it to results
    (push
     (index-lookup-values collection (list :surname "Frikkedel"))
     results)

    ;;Query the collection, query-data will load the data from file if the collection is empty,
    ;;and add it to the results
    (push (query-data collection :query (lambda (data-object)
					  (<= (getx data-object :id) 900)))
	  results)

    (reverse results))
#+END_SRC

Output:

#+BEGIN_SRC lisp
  (((:NAME "Koos" :SURNAME "Van" :ID 999 :HASH
	   "8648DA3F-4589-415A-99F6-3F3F2EE9D2F2"))
   ((:NAME "Tannie" :SURNAME "Frikkedel" :ID 1001 :HASH
	   "853C702B-86E6-42C8-A4B5-03C3149B145F")
    (:NAME "Frikie" :SURNAME "Frikkedel" :ID 1001 :HASH
	   "853C702B-86E6-42C8-A4B5-03C3149B145F"))
   ((:NAME "Sannie" :SURNAME "Gieter" :ID 321 :HASH
	   "878C988C-711A-41BF-A598-BAC95AC51192")
    (:NAME "Piet" :SURNAME "Gieter" :ID 123 :HASH
	   "B1464677-BDB0-495A-A050-D2965F770915")))
#+END_SRC

In the returned list the first item is Koos that we looked up using the index. We used a full index lookup ie we used all the index values.

The second item is a list of both Frikie and Tannie that we looked up using the surname index. We used partial index lookup ie just the surname was used in the lookup.

The third item is a list of all the :id values <= 900

You will also notice that a :hash made up of a UUID like "8648DA3F-4589-415A-99F6-3F3F2EE9D2F2" was allocated to each object that was added to the collection. The :hash value will remain the same throughout the life time of the object.

You could use

#+BEGIN_SRC lisp
  (index-lookup-uuid "8648DA3F-4589-415A-99F6-3F3F2EE9D2F2")
#+END_SRC

to lookup Koos by uuid value.

[[file:home.org][Home]] [[file:basic-example-with-persistence.org][Previous]] [[file:documents-example.org][Next]]
